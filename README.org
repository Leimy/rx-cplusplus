* Radioxenu Bot / metadata / twitter client implementation in c++

** Building
   cd to the lua subdirectory... build as appopriate... install as appropriate.
   cmake it up afterwards (yeah I'll make this clearer later)

** Motivation
The Go version has been working pretty well, but it is consuming a bit more resources than necessary.
It is adequate for now, so there is no emergency to replace it, but it's become a task to debug it
when it gets stuck. About once per week a DJ will get on and the metadata updates totally stop flowing
while this is most certainly a bug in the Go code, I do not know how to reproduce it and as such, can
not fix it.

I'm taking a different approach in this implementation. Any time we detect anything going wrong, we're
going to restart - ALL OF IT. This should give me the best experience as the guy who also has to log
in to do restarts of the system when it doesn't work.

** Requirements

   1. [X] Twitter support - currently using the go stack single simple driver program in botlogic.lua.
   2. [X] Metadata stream capture
   3. [X] IRC bot - coming with Lua support for processing commands
   4. [ ] Persistant Configuration restore on restart - if configuration is in Lua, we can generate it, store values in tables and serialize it

** Nice feature ideas?

*** Twitter
    Just forking out to Go for now. Was thinking of writing an oauth2 library, but openssl is not thread safe?! Ew.

*** Metadata stream status
    Working.

*** IRC Bot
    Lua is now controlling.
    1. Ping/Pong
    2. ?lastsong?
    3. ?autolast? (though my C++ object lifetimes are laughably bad - shared_ptr forthcoming)
    4. Properly being serialized for activity behind an asio::strand (baby yeah!?)
    5. ?tweet?
    6. ?autotweet?

*** Persistant Configuration restore on restart
    Totally event driven.
    
**** Configuration changes
     When a user sets a configuration change, it will:
     1. Push the configuration change event into the state machine - causing immediate event
	behavior changes. (autotweet on/off, autolast on/off - not toggles!) and respond (tweet, lastsong)
     2. Store this setting state in a configuration file/db that gets re-read at every restart.

**** Metadata update
     When metadata changes on the metadata stream, we run a C++ callback - injecting data into the
     configured Lua state machine - producing the behaviors we support (tweet, broadcast metadata
     to channel)
     
     This needs work. It's currently only partially managed by a metastate class, but I'd like to
     make it so the metadata stream knows nothing about the bot code, but that the bot should be
     able to subscribe to metadata updates. This would effectively wire in a C++-wrapped lua function
     to receive the metadata and examine the state of ?autolast?


