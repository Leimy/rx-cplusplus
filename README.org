* Radioxenu Bot / metadata / twitter client implementation in c++

** Building
   cd to the lua subdirectory... build as appopriate... install as appropriate.
   cmake it up afterwards (yeah I'll make this clearer later)

** Motivation
The Go version has been working pretty well, but it is consuming a bit more resources than necessary.
It is adequate for now, so there is no emergency to replace it, but it's become a task to debug it
when it gets stuck. About once per week a DJ will get on and the metadata updates totally stop flowing
while this is most certainly a bug in the Go code, I do not know how to reproduce it and as such, can
not fix it.

I'm taking a different approach in this implementation. Any time we detect anything going wrong, we're
going to restart - ALL OF IT. This should give me the best experience as the guy who also has to log
in to do restarts of the system when it doesn't work.

** Requirements

   1. [ ] Twitter support - maybe via an external program (Lua and C++ twitter clients are hard to come by. Could write one, but yuck)
   2. [X] Metadata stream capture
   3. [?] IRC bot - coming with Lua support for processing commands
   4. [ ] Persistant Configuration restore on restart - if configuration is in Lua, we can generate it, store values in tables and serialize it

** Nice feature ideas?
   1. [ ] Write a persistent, queryable selection of the last 10 requests from the chat. DJs track what they've played!

*** Twitter
    Unless I can find a good oauth/twitter client for C++ I may just fork
    out to Go to tweet from the rx-go repository. It's basically a duct tape
    solution, but it would accelerate the delivery of this software greatly.
    Kind of gross, as it burns more megabytes than I want of private memory space.

*** Metadata stream status
    it's working, just need to expose it to Lua

*** IRC Bot
    Pinging/Ponging is controlled by Lua! And as I get better with Lua, I'm going to add more features! 
    
*** Persistant Configuration restore on restart
    Totally event driven.
    
**** Configuration changes
     When a user sets a configuration change, it will:
     1. Push the configuration change event into the state machine - causing immediate event
	behavior changes. (autotweet on/off, autolast on/off - not toggles!) and respond (tweet, lastsong)
     2. Store this setting state in a configuration file/db that gets re-read at every restart.

**** Metadata update
     When metadata changes on the metadata stream, we run a C++ callback - injecting data into the
     configured Lua state machine - producing the behaviors we support (tweet, broadcast metadata
     to channel)



     
    
