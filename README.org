* Radioxenu Bot / metadata / twitter client implementation in c++
** Motivation
The Go version has been working pretty well, but it is consuming a bit more resources than necessary.
It is adequate for now, so there is no emergency to replace it, but it's become a task to debug it
when it gets stuck. About once per week a DJ will get on and the metadata updates totally stop flowing
while this is most certainly a bug in the Go code, I do not know how to reproduce it and as such, can
not fix it.

I'm taking a different approach in this implementation. Any time we detect anything going wrong, we're
going to restart - ALL OF IT. This should give me the best experience as the guy who also has to log
in to do restarts of the system when it doesn't work.

** Requirements

   1. [ ] Twitter support
   2. [X] Metadata stream capture
   3. [ ] IRC bot
   4. [ ] Persistant Configuration restore on restart

*** Twitter

*** Metadata stream status

*** IRC Bot
      Very rudimentary support right now. It can hear what everyone's saying and is nearly ready to
      take commands. The command processing will be in a separate module. I will be tying in the
      configuration with the processing the bot does.

*** Persistant Configuration restore on restart
    Totally event driven.
    
**** Configuration changes
     When a user sets a configuration change, it will:
     1. Push the configuration change event into the state machine - causing immediate event
	behavior changes. (autotweet on/off, autolast on/off - not toggles!) and respond (tweet, lastsong)
     2. Store this setting state in a configuration file/db that gets re-read at every restart.

**** Metadata update
     When metadata changes on the metadata stream, we run a C++ callback - injecting data into the
     configured Lua state machine - producing the behaviors we support (tweet, broadcast metadata
     to channel)



     
    
